apply plugin: 'maven-publish'
apply plugin: 'signing'

// Create variables with empty default values
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.key"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
  // Read local.properties file first if it exists
  Properties p = new Properties()
  new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
  p.each { name, value -> ext[name] = value }
} else {
  // Use system environment variables
  ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
  ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
  ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
  ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
  ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
  ext["signing.key"] = System.getenv('SIGNING_KEY')
}

nexusPublishing {
  repositories {
    sonatype {
      stagingProfileId = sonatypeStagingProfileId
      username = ossrhUsername
      password = ossrhPassword
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
    }
  }
}

tasks.register('androidSourcesJar', Jar) {
  archiveClassifier.set('sources')
  if (project.plugins.findPlugin("com.android.library")) {
    // For Android libraries
    from android.sourceSets.main.java.srcDirs
    from android.sourceSets.main.kotlin.srcDirs
  } else {
    // For pure Kotlin libraries, in case you have them
    from sourceSets.main.java.srcDirs
    from sourceSets.main.kotlin.srcDirs
  }
}

tasks.register('javadocJar', Jar) {
  dependsOn dokkaJavadoc
  archiveClassifier.set('javadoc')
  from dokkaJavadoc.outputDirectory
}

artifacts {
  archives androidSourcesJar
  archives javadocJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

afterEvaluate {
  publishing {
    publications {
      release(MavenPublication) {
        groupId PUBLISH_GROUP_ID
        artifactId PUBLISH_ARTIFACT_ID
        version PUBLISH_VERSION

        if (project.plugins.findPlugin("com.android.library")) {
          from components.release
        } else {
          from components.java
        }

        artifact androidSourcesJar
        artifact javadocJar

        pom {
          name = PUBLISH_ARTIFACT_ID
          description = 'Android Resource Poet'
          url = 'https://github.com/msasikanth/android-resource-poet'
          licenses {
            license {
              name = 'Android Resource Poet License'
              url = 'https://github.com/msasikanth/android-resource-poet/blob/main/LICENSE'
            }
          }
          developers {
            developer {
              id = 'sasikanth'
              name = 'Sasikanth Miriyampalli'
              email = 'hello@sasikanth.dev'
            }
          }

          scm {
            connection = 'scm:git:github.com/msasikanth/android-resource-poet.git'
            developerConnection = 'scm:git:ssh://github.com/msasikanth/android-resource-poet.git'
            url = 'https://github.com/msasikanth/android-resource-poet/tree/main'
          }
        }
      }
    }
  }
}

signing {
  useInMemoryPgpKeys(
    rootProject.ext["signing.keyId"],
    rootProject.ext["signing.key"],
    rootProject.ext["signing.password"],
  )
  sign publishing.publications
}
